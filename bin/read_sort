#!/usr/bin/env python

# Driver for the read_sort hadoop program.
# For usage instructions run ./read_sort --help

import hadut

import os
import optparse
import sys

class HelpFormatter(optparse.IndentedHelpFormatter):
  def format_description(self, description):
    return description + "\n" if description else ""

def make_parser():
	parser = optparse.OptionParser(
	  usage="%prog [OPTIONS] --annotations=ANN INPUT OUTPUT",
	  formatter=HelpFormatter()
	  )
	parser.add_option("-a", "--annotations", metavar="FILE",
			help="BWA reference annotations file. For a local file, specify a full URI such as file:///path/to/ref.ann or hdfs:///user/me/ref.ann")
	parser.add_option("-r", "--reducers", type="int", metavar="INT",
			help="Number of reducers to use.  By default %s will use 3 per node." % sys.argv[0])
	return parser


def scan_args():
	parser = make_parser()
	opt, args = parser.parse_args()

	if not opt.annotations:
		parser.error("Missing argument --annotations")

	if len(args) != 2:
		parser.error("Incorrect number of arguments")
	else:
		if not hadut.hdfs_path_exists(args[0]):
			parser.error("Can't read HDFS input path %s" % args[0])
		elif hadut.hdfs_path_exists(args[1]):
			parser.error("HDFS output path %s already exists.  Please remove it first" % args[1])

	return opt, args[0], args[1]

def jar_path():
	return os.path.realpath(os.path.join(os.path.dirname(sys.argv[0]), "..", "ReadSort.jar"))
	

def main():
	print >>sys.stderr, "Using hadoop executable %s" % hadut.hadoop

	opt, input, output = scan_args()

	if opt.reducers is None:
		n_nodes = hadut.num_nodes()
		n_reducers = 3*n_nodes
	else:
		n_reducers = opt.reducers

	properties = dict()
	properties['io.sort.mb'] = 800
	properties['mapred.child.java.opts'] = "-Xmx1156m"
	properties['mapred.compress.map.output'] = "true"
	properties['mapred.job.map.memory.mb'] = 2000
	properties['mapred.job.reduce.input.buffer.percent'] = 0.75
	properties['mapred.job.reduce.memory.mb'] = 2500
	properties['mapred.reduce.tasks'] = n_reducers

	hadut.run_hadoop_jar(jar_path(), properties=properties, args_list=["--annotations", opt.annotations, input, output])


if __name__ == "__main__":
  main()
