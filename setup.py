# BEGIN_COPYRIGHT
# END_COPYRIGHT

"""seqal: Sequence Alignment on Hadoop.

seqal is a suite of Python MapReduce applications for biological
sequence alignment. Applications run on Pydoop
(http://pydoop.sourceforge.net), a Python MapReduce and HDFS API for
Hadoop (http://hadoop.apache.org).
"""

import os
from distutils.core import setup
from distutils.errors import DistutilsSetupError


NAME = 'seqal'
DESCRIPTION = __doc__.split("\n", 1)[0]
LONG_DESCRIPTION = __doc__
URL = "http://www.crs4.it"
# DOWNLOAD_URL = ""
LICENSE = 'GPL'
CLASSIFIERS = [
  "Programming Language :: Python",
  "License :: OSI Approved :: GNU General Public License (GPL)",
  "Operating System :: POSIX :: Linux",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Intended Audience :: Science/Research",
  ]
PLATFORMS = ["Linux"]
try:
  with open("VERSION") as f:
    VERSION = f.read().strip()
except IOError:
  raise DistutilsSetupError("failed to read version info")
AUTHOR_INFO = [
  ("Simone Leo", "simone.leo@crs4.it"),
  ("Luca Pireddu", "luca.pireddu@crs4.it"),
  ("Gianluigi Zanetti", "gianluigi.zanetti@crs4.it"),
  ]
MAINTAINER_INFO = [
  ("Luca Pireddu", "luca.pireddu@crs4.it"),
  ]
AUTHOR = ", ".join(t[0] for t in AUTHOR_INFO)
AUTHOR_EMAIL = ", ".join("<%s>" % t[1] for t in AUTHOR_INFO)
MAINTAINER = ", ".join(t[0] for t in MAINTAINER_INFO)
MAINTAINER_EMAIL = ", ".join("<%s>" % t[1] for t in MAINTAINER_INFO)


def write_version(filename="bl/lib/seq/version.py"):
  with open(filename, "w") as f:
    f.write("# GENERATED BY setup.py\n")
    f.write("version='%s'\n" % VERSION)


def write_authors(filename="AUTHORS"):
  with open(filename, "w") as f:
    f.write("seqal is developed by:\n")
    for name, email in AUTHOR_INFO:
      f.write(" * %s <%s>\n" % (name, email))
    f.write("and maintained by:\n")
    for name, email in MAINTAINER_INFO:
      f.write(" * %s <%s>\n" % (name, email))


#-- FIXME: handle internally ------------------------------------------------
from distutils.command.build import build as du_build

class build(du_build):
  def run(self):
    du_build.run(self)
    libbwa_dir = "bl/lib/seq/aligner/bwa"
    libbwa_src = os.path.join(libbwa_dir, "libbwa")
    libbwa_dest = os.path.abspath(os.path.join(self.build_purelib, libbwa_dir))
    ret = os.system("BWA_LIBRARY_DIR=%s make -C %s libbwa" %
                    (libbwa_dest, libbwa_src))
    if ret:
      raise DistutilsSetupError("could not make libbwa")
    # protobuf classes
    proto_src = "bl/lib/seq/aligner/io/mapping.proto"
    ret = os.system("protoc %s --python_out=%s" %
                    (proto_src, self.build_purelib))
    if ret:
      raise DistutilsSetupError("could not run protoc")
#----------------------------------------------------------------------------


write_authors()
#write_version()

setup(name=NAME,
      description=DESCRIPTION,
      long_description=LONG_DESCRIPTION,
      url=URL,
##      download_url=DOWNLOAD_URL,
      license=LICENSE,
      classifiers=CLASSIFIERS,
      author=AUTHOR,
      author_email=AUTHOR_EMAIL,
      maintainer=MAINTAINER,
      maintainer_email=MAINTAINER_EMAIL,
      platforms=PLATFORMS,
      version=VERSION,
      packages=['bl',
                'bl.lib',
                'bl.lib.tools',
                'bl.lib.seq',
                'bl.lib.seq.aligner',
                'bl.lib.seq.aligner.bwa',
                'bl.lib.seq.aligner.io',
                'bl.mr',
                'bl.mr.lib',
                'bl.mr.seq',
                'bl.mr.seq.seqal',
                ],
      cmdclass={"build": build},
      )
