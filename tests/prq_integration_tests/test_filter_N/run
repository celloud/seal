#!/bin/bash

# You need a working Hadoop cluster to run this.
#set -x
set -o nounset
set -o errexit

TestDir="$(dirname $0)"
source ${TestDir}/../blocks.sh

prep $@

${HADOOP} dfsadmin -safemode wait
${HADOOP} dfs -mkdir "${WD}/bin"
${HADOOP} dfs -put "${TestDir}/input" "${WD}/input"
output=$(${HADOOP} jar "${Jar}" -D bl.prq.min-bases-per-read=15 -D bl.prq.drop-failed-filter=false -D mapred.reduce.tasks=1 "${WD}/input" "${WD}/output" 2>&1)
neb=$(echo "${output}" | grep "NotEnoughBases=" | sed 's/.*NotEnoughBases=\([0-9]\+\)/\1/')
ndropped=$(echo "${output}" | grep "Dropped=" | sed 's/.*Dropped=\([0-9]\+\)/\1/')
${HADOOP} dfs -get "${WD}/output" "${OutputDir}"
${HADOOP} dfs -rmr "${WD}"

compare_sorted_output "${TestDir}/expected"  # sets exit_code
if [ $exit_code != 0 ]; then
	echo "Unexpected test output" >&2
elif [ "${neb}" != "4" ]; then
	echo "Unexpected counted reads without enough known bases (expected " 4 " but got ${neb})" >&2
	exit_code=2
elif [ "${ndropped}" != "2" ]; then
	echo "Unexpected counted reads dropped (expected " 2 " but got ${ndropped})" >&2
	exit_code=3
fi

show_test_msg $exit_code "${TestDir}"
rm_output_dir
exit $exit_code
